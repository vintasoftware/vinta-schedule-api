# Generated by Django 5.2.2 on 2025-08-29 12:17

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('calendar_integration', '0006_add_recurring_blocked_available_times_functions'),
    ]

    operations = [
        migrations.AddField(
            model_name='availabletime',
            name='is_recurring_exception',
            field=models.BooleanField(default=False, help_text='True if this object is an exception to the recurrence rule (modified occurrence)'),
        ),
        migrations.AddField(
            model_name='availabletime',
            name='parent_recurring_object',
            field=models.ForeignObject(editable=False, from_fields=['parent_recurring_object_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_recurring_instances', to='calendar_integration.availabletime', to_fields=['id', 'organization_id']),
        ),
        migrations.AddField(
            model_name='availabletime',
            name='parent_recurring_object_fk',
            field=models.ForeignKey(blank=True, help_text='If this is an instance of a recurring object, points to the parent object', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_recurring_instances_fk_rel', to='calendar_integration.availabletime'),
        ),
        migrations.AddField(
            model_name='availabletime',
            name='recurrence_id',
            field=models.DateTimeField(blank=True, help_text='For recurring instances, this identifies which occurrence this is', null=True),
        ),
        migrations.AddField(
            model_name='availabletime',
            name='recurrence_rule',
            field=models.ForeignObject(editable=False, from_fields=['recurrence_rule_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_instance', to='calendar_integration.recurrencerule', to_fields=['id', 'organization_id'], unique=True),
        ),
        migrations.AddField(
            model_name='availabletime',
            name='recurrence_rule_fk',
            field=models.OneToOneField(blank=True, help_text='The recurrence rule for this object. If set, this object is recurring.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_instance_fk_rel', to='calendar_integration.recurrencerule'),
        ),
        migrations.AddField(
            model_name='blockedtime',
            name='is_recurring_exception',
            field=models.BooleanField(default=False, help_text='True if this object is an exception to the recurrence rule (modified occurrence)'),
        ),
        migrations.AddField(
            model_name='blockedtime',
            name='parent_recurring_object',
            field=models.ForeignObject(editable=False, from_fields=['parent_recurring_object_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_recurring_instances', to='calendar_integration.blockedtime', to_fields=['id', 'organization_id']),
        ),
        migrations.AddField(
            model_name='blockedtime',
            name='parent_recurring_object_fk',
            field=models.ForeignKey(blank=True, help_text='If this is an instance of a recurring object, points to the parent object', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_recurring_instances_fk_rel', to='calendar_integration.blockedtime'),
        ),
        migrations.AddField(
            model_name='blockedtime',
            name='recurrence_id',
            field=models.DateTimeField(blank=True, help_text='For recurring instances, this identifies which occurrence this is', null=True),
        ),
        migrations.AddField(
            model_name='blockedtime',
            name='recurrence_rule',
            field=models.ForeignObject(editable=False, from_fields=['recurrence_rule_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_instance', to='calendar_integration.recurrencerule', to_fields=['id', 'organization_id'], unique=True),
        ),
        migrations.AddField(
            model_name='blockedtime',
            name='recurrence_rule_fk',
            field=models.OneToOneField(blank=True, help_text='The recurrence rule for this object. If set, this object is recurring.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_instance_fk_rel', to='calendar_integration.recurrencerule'),
        ),
        migrations.AlterField(
            model_name='calendarevent',
            name='parent_recurring_object',
            field=models.ForeignObject(editable=False, from_fields=('parent_recurring_object_fk', 'organization_id'), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_recurring_instances', to='calendar_integration.calendarevent', to_fields=('id', 'organization_id')),
        ),
        migrations.AlterField(
            model_name='calendarevent',
            name='parent_recurring_object_fk',
            field=models.ForeignKey(blank=True, help_text='If this is an instance of a recurring object, points to the parent object', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_recurring_instances_fk_rel', to='calendar_integration.calendarevent'),
        ),
        migrations.AlterField(
            model_name='calendarevent',
            name='recurrence_rule',
            field=models.ForeignObject(editable=False, from_fields=('recurrence_rule_fk', 'organization_id'), null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_instance', to='calendar_integration.recurrencerule', to_fields=('id', 'organization_id'), unique=True),
        ),
        migrations.AlterField(
            model_name='calendarevent',
            name='recurrence_rule_fk',
            field=models.OneToOneField(blank=True, help_text='The recurrence rule for this object. If set, this object is recurring.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_instance_fk_rel', to='calendar_integration.recurrencerule'),
        ),
    ]

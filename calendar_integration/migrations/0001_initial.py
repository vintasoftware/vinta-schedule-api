# Generated by Django 5.2.2 on 2025-08-19 00:55

import django.db.models.deletion
import django.utils.timezone
import encrypted_fields.fields
import model_utils.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('external_id', models.CharField(blank=True, max_length=255)),
                ('provider', models.CharField(choices=[('internal', 'Internal Calendar'), ('google', 'Google Calendar'), ('microsoft', 'Microsoft Outlook Calendar'), ('apple', 'Apple Calendar'), ('ics', 'ICS')], default='internal', max_length=255)),
                ('calendar_type', models.CharField(choices=[('personal', 'Personal Calendar'), ('resource', 'Resource Calendar'), ('virtual', 'Virtual Calendar')], default='personal', help_text='The type of calendar. Personal calendars are for individual use, resource calendars are for shared resources, and virtual calendars are for online meetings or events.', max_length=50)),
                ('capacity', models.PositiveIntegerField(blank=True, help_text="The maximum number of attendees that can be accommodated in this calendar's events. This is only applicable for resource calendars.", null=True)),
                ('manage_available_windows', models.BooleanField(default=False, help_text="If true, this calendar can manage its own available time windows. If not, it will use the available time windows of the external calendar it's attached to.")),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
            ],
        ),
        migrations.CreateModel(
            name='AvailableTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
                ('calendar', models.ForeignObject(editable=False, from_fields=['calendar_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='available_times', to='calendar_integration.calendar', to_fields=['id', 'organization_id'])),
                ('calendar_fk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='available_times_fk_rel', to='calendar_integration.calendar')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('external_id', models.CharField(blank=True, max_length=255, unique=True)),
                ('recurrence_id', models.DateTimeField(blank=True, help_text='For recurring event instances, this identifies which occurrence this is', null=True)),
                ('is_recurring_exception', models.BooleanField(default=False, help_text='True if this event is an exception to the recurrence rule (modified occurrence)')),
                ('calendar', models.ForeignObject(editable=False, from_fields=['calendar_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='calendar_integration.calendar', to_fields=['id', 'organization_id'])),
                ('calendar_fk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events_fk_rel', to='calendar_integration.calendar')),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
                ('parent_event', models.ForeignObject(editable=False, from_fields=['parent_event_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurring_instances', to='calendar_integration.calendarevent', to_fields=['id', 'organization_id'])),
                ('parent_event_fk', models.ForeignKey(blank=True, help_text='If this is an instance of a recurring event, points to the parent event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurring_instances_fk_rel', to='calendar_integration.calendarevent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CalendarOrganizationResourcesImport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('in_progress', 'In Progress'), ('not_started', 'Not Started')], default='not_started', max_length=50)),
                ('error_message', models.TextField(blank=True)),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CalendarOwnership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('is_default', models.BooleanField(default=False, help_text='If true, this calendar is the default calendar for the user in this organization. This means that events created by the user will be added to this calendar by default.')),
                ('calendar', models.ForeignObject(editable=False, from_fields=['calendar_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ownerships', to='calendar_integration.calendar', to_fields=['id', 'organization_id'])),
                ('calendar_fk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ownerships_fk_rel', to='calendar_integration.calendar')),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_ownerships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='calendar',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='calendars', through='calendar_integration.CalendarOwnership', through_fields=('calendar_fk', 'user'), to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CalendarSync',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('next_sync_token', models.CharField(blank=True, max_length=255)),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('should_update_events', models.BooleanField()),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('in_progress', 'In Progress'), ('not_started', 'Not Started')], default='not_started', max_length=50)),
                ('error_message', models.TextField(blank=True)),
                ('calendar', models.ForeignObject(editable=False, from_fields=['calendar_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='syncs', to='calendar_integration.calendar', to_fields=['id', 'organization_id'])),
                ('calendar_fk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='syncs_fk_rel', to='calendar_integration.calendar')),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('status', models.CharField(choices=[('accepted', 'Accepted'), ('declined', 'Declined'), ('pending', 'Pending')], default='pending', max_length=50)),
                ('event', models.ForeignObject(editable=False, from_fields=['event_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='calendar_integration.calendarevent', to_fields=['id', 'organization_id'])),
                ('event_fk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attendances_fk_rel', to='calendar_integration.calendarevent')),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_attendances', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='attendees',
            field=models.ManyToManyField(blank=True, related_name='calendar_events', through='calendar_integration.EventAttendance', through_fields=('event', 'user'), to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ExternalAttendee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventExternalAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('status', models.CharField(choices=[('accepted', 'Accepted'), ('declined', 'Declined'), ('pending', 'Pending')], default='pending', max_length=50)),
                ('event', models.ForeignObject(editable=False, from_fields=['event_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='external_attendances', to='calendar_integration.calendarevent', to_fields=['id', 'organization_id'])),
                ('event_fk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='external_attendances_fk_rel', to='calendar_integration.calendarevent')),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
                ('external_attendee', models.ForeignObject(editable=False, from_fields=['external_attendee_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='external_attendances', to='calendar_integration.externalattendee', to_fields=['id', 'organization_id'])),
                ('external_attendee_fk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='external_attendances_fk_rel', to='calendar_integration.externalattendee')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='external_attendees',
            field=models.ManyToManyField(related_name='calendar_events', to='calendar_integration.externalattendee'),
        ),
        migrations.CreateModel(
            name='GoogleCalendarServiceAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('email', models.EmailField(max_length=254)),
                ('audience', models.CharField(max_length=255)),
                ('public_key', models.TextField()),
                ('private_key_id', encrypted_fields.fields.EncryptedCharField(max_length=255)),
                ('private_key', encrypted_fields.fields.EncryptedCharField(max_length=255)),
                ('calendar', models.ForeignObject(editable=False, from_fields=['calendar_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='google_service_accounts', to='calendar_integration.calendar', to_fields=['id', 'organization_id'])),
                ('calendar_fk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='google_service_accounts_fk_rel', to='calendar_integration.calendar')),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventRecurrenceException',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('exception_date', models.DateTimeField(help_text='The original start time of the occurrence being excepted')),
                ('is_cancelled', models.BooleanField(default=False, help_text="True if this occurrence is cancelled, False if it's modified")),
                ('modified_event', models.ForeignObject(editable=False, from_fields=['modified_event_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exception_for', to='calendar_integration.calendarevent', to_fields=['id', 'organization_id'])),
                ('modified_event_fk', models.ForeignKey(blank=True, help_text='If the occurrence is modified (not cancelled), points to the modified event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exception_for_fk_rel', to='calendar_integration.calendarevent')),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
                ('parent_event', models.ForeignObject(editable=False, from_fields=['parent_event_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrence_exceptions', to='calendar_integration.calendarevent', to_fields=['id', 'organization_id'])),
                ('parent_event_fk', models.ForeignKey(help_text='The recurring event this exception applies to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrence_exceptions_fk_rel', to='calendar_integration.calendarevent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecurrenceRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('frequency', models.CharField(choices=[('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('YEARLY', 'Yearly')], help_text='How often the event repeats (DAILY, WEEKLY, MONTHLY, YEARLY)', max_length=10)),
                ('interval', models.PositiveIntegerField(default=1, help_text='The interval between each frequency iteration (e.g., every 2 weeks)')),
                ('count', models.PositiveIntegerField(blank=True, help_text='Number of occurrences after which the recurrence ends', null=True)),
                ('until', models.DateTimeField(blank=True, help_text='The date and time until which the recurrence is valid', null=True)),
                ('by_weekday', models.CharField(blank=True, help_text="Comma-separated list of weekdays (e.g., 'MO,WE,FR')", max_length=100)),
                ('by_month_day', models.CharField(blank=True, help_text="Comma-separated list of month days (e.g., '1,15,-1' for 1st, 15th, last day)", max_length=100)),
                ('by_month', models.CharField(blank=True, help_text='Comma-separated list of months (1-12)', max_length=50)),
                ('by_year_day', models.CharField(blank=True, help_text='Comma-separated list of year days (1-366 or -366 to -1)', max_length=100)),
                ('by_week_number', models.CharField(blank=True, help_text='Comma-separated list of week numbers (1-53 or -53 to -1)', max_length=100)),
                ('by_hour', models.CharField(blank=True, help_text='Comma-separated list of hours (0-23)', max_length=100)),
                ('by_minute', models.CharField(blank=True, help_text='Comma-separated list of minutes (0-59)', max_length=200)),
                ('by_second', models.CharField(blank=True, help_text='Comma-separated list of seconds (0-59)', max_length=200)),
                ('week_start', models.CharField(choices=[('MO', 'Monday'), ('TU', 'Tuesday'), ('WE', 'Wednesday'), ('TH', 'Thursday'), ('FR', 'Friday'), ('SA', 'Saturday'), ('SU', 'Sunday')], default='MO', help_text='First day of the week', max_length=2)),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='recurrence_rule',
            field=models.ForeignObject(editable=False, from_fields=['recurrence_rule_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event', to='calendar_integration.recurrencerule', to_fields=['id', 'organization_id'], unique=True),
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='recurrence_rule_fk',
            field=models.OneToOneField(blank=True, help_text='The recurrence rule for this event. If set, this event is recurring.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_fk_rel', to='calendar_integration.recurrencerule'),
        ),
        migrations.CreateModel(
            name='ResourceAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('status', models.CharField(choices=[('accepted', 'Accepted'), ('declined', 'Declined'), ('pending', 'Pending')], default='pending', max_length=50)),
                ('calendar', models.ForeignObject(editable=False, from_fields=['calendar_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resource_allocations', to='calendar_integration.calendar', to_fields=['id', 'organization_id'])),
                ('calendar_fk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resource_allocations_fk_rel', to='calendar_integration.calendar')),
                ('event', models.ForeignObject(editable=False, from_fields=['event_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resource_allocations', to='calendar_integration.calendarevent', to_fields=['id', 'organization_id'])),
                ('event_fk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resource_allocations_fk_rel', to='calendar_integration.calendarevent')),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='calendarevent',
            name='resources',
            field=models.ManyToManyField(blank=True, related_name='allocated_events', through='calendar_integration.ResourceAllocation', through_fields=('event', 'calendar'), to='calendar_integration.calendar'),
        ),
        migrations.CreateModel(
            name='BlockedTime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('reason', models.CharField(blank=True, max_length=255)),
                ('external_id', models.CharField(blank=True, max_length=255)),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
                ('calendar', models.ForeignObject(editable=False, from_fields=['calendar_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blocked_times', to='calendar_integration.calendar', to_fields=['id', 'organization_id'])),
                ('calendar_fk', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='blocked_times_fk_rel', to='calendar_integration.calendar')),
            ],
            options={
                'unique_together': {('calendar_fk_id', 'external_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='calendar',
            unique_together={('external_id', 'provider', 'organization_id')},
        ),
        migrations.CreateModel(
            name='AvailableTimeRecurrenceException',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('exception_date', models.DateTimeField(help_text='The original start time of the occurrence being excepted')),
                ('is_cancelled', models.BooleanField(default=False, help_text="True if this occurrence is cancelled, False if it's modified")),
                ('modified_available_time', models.ForeignObject(editable=False, from_fields=['modified_available_time_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exception_for', to='calendar_integration.availabletime', to_fields=['id', 'organization_id'])),
                ('modified_available_time_fk', models.ForeignKey(blank=True, help_text='If the occurrence is modified (not cancelled), points to the modified event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exception_for_fk_rel', to='calendar_integration.availabletime')),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
                ('parent_available_time', models.ForeignObject(editable=False, from_fields=['parent_available_time_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrence_exceptions', to='calendar_integration.availabletime', to_fields=['id', 'organization_id'])),
                ('parent_available_time_fk', models.ForeignKey(help_text='The recurring event this exception applies to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrence_exceptions_fk_rel', to='calendar_integration.availabletime')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BlockedTimeRecurrenceException',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('meta', models.JSONField(blank=True, default=dict, verbose_name='meta')),
                ('exception_date', models.DateTimeField(help_text='The original start time of the occurrence being excepted')),
                ('is_cancelled', models.BooleanField(default=False, help_text="True if this occurrence is cancelled, False if it's modified")),
                ('modified_blocked_time', models.ForeignObject(editable=False, from_fields=['modified_blocked_time_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exception_for', to='calendar_integration.blockedtime', to_fields=['id', 'organization_id'])),
                ('modified_blocked_time_fk', models.ForeignKey(blank=True, help_text='If the occurrence is modified (not cancelled), points to the modified event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exception_for_fk_rel', to='calendar_integration.blockedtime')),
                ('organization', models.ForeignKey(help_text='The organization this model is associated with. Queries should use the `organization` field.', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='organizations.organization')),
                ('parent_blocked_time', models.ForeignObject(editable=False, from_fields=['parent_blocked_time_fk', 'organization_id'], null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrence_exceptions', to='calendar_integration.blockedtime', to_fields=['id', 'organization_id'])),
                ('parent_blocked_time_fk', models.ForeignKey(help_text='The recurring event this exception applies to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurrence_exceptions_fk_rel', to='calendar_integration.blockedtime')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
